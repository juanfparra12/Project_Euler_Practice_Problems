/*  

    Each new term in the Fibonacci sequence is generated by adding the previous 
    two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not 
    exceed n, find the sum of the even-valued terms.
 
*/

function fiboEvenSum(n) {

    if (n <= 1) {
        return 0;
    }
    else {
        //Establish our F(0) and F(1) cases based off probelm description
        let prevFibNum = 1,
            currFibNum = 2,
            evenSum = 0;

        //Looping through Fibonacci sequence whose values do not exceed n
        for (let i = 2; currFibNum <= n; i++) {
            //Check to see if current fibNum is even and adds to total sum
            //console.log(`Current fibNum: ${currFibNum}`);
            if (currFibNum % 2 === 0) {
                evenSum += currFibNum;
                //console.log(`Current Sum: ${evenSum}`);
            }

            /*  Using ES6 array destructuring to reassign values of currFibNum 
            and prevFibNum */
            [prevFibNum, currFibNum] = [currFibNum, prevFibNum + currFibNum];

        }
        //console.log(evenSum);
        return evenSum;
    }

}

fiboEvenSum(1);
fiboEvenSum(8);
fiboEvenSum(34);
fiboEvenSum(60);
fiboEvenSum(1000);
fiboEvenSum(100000);
fiboEvenSum(4000000);